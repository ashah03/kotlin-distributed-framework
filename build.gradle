plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.3.50'
    id "com.github.ben-manes.versions" version "0.28.0"
    id 'com.github.johnrengelman.shadow' version '5.2.0'
    id 'com.google.protobuf' version '0.8.12'
    id 'jacoco'
    id 'com.github.kt3k.coveralls' version '2.8.4'
}

group 'com.aditshah'
version '1.0-SNAPSHOT'

jacocoTestReport {
    reports {
        xml.enabled = true // coveralls plugin depends on xml format report
        html.enabled = true
    }
}

def serializationVersion = '0.13.0'
def jetcdVersion = '0.3.0'
def utilsVersion = '1.1.8'
def logbackVersion = '1.2.3'
def loggingVersion = '1.7.9'
def slf4jVersion = '1.7.28'
def kluentVersion = '1.56'
def junitVersion = '5.5.2'
def etcdRecipesVersion = '+'
def ktorVersion = '1.2.6'
def grpcVersion = '1.27.1'
def kgaxVersion = '0.6.0'
def protocVersion = '3.11.4'
def annotationVersion = "1.3.2"


protobuf {
    protoc { artifact = "com.google.protobuf:protoc:${protocVersion}" }
    plugins {
        grpc { artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}" }

        client { artifact = 'com.github.googleapis:gapic-generator-kotlin:master-SNAPSHOT:core@jar' }
    }
    generateProtoTasks {
        all()*.plugins {
            grpc {}
        }

        all().each { task ->
            task.plugins {
                client {}
            }
        }
    }
}

compileKotlin.dependsOn ':generateProto'


repositories {
    maven { url "https://kotlin.bintray.com/kotlinx" }
    maven { url = 'https://jitpack.io' }
    mavenCentral()
    jcenter()
    maven { url 'https://jitpack.io' }

}

dependencies {
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
//    implementation "com.github.pambrose:etcd-recipes:$etcdRecipesVersion"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-runtime:$serializationVersion"
    implementation "io.etcd:jetcd-all:${jetcdVersion}"
    implementation "com.github.pambrose:common-utils:${utilsVersion}"
//    implementation "io.github.microutils:kotlin-logging:$loggingVersion"
//    implementation "org.slf4j:slf4j-simple:${slf4jVersion}"
    implementation "io.ktor:ktor-serialization:${ktorVersion}"
    implementation "io.ktor:ktor-client:$ktorVersion"
    implementation "com.github.pambrose.common-utils:ktor-client-utils:${utilsVersion}"

    implementation "ch.qos.logback:logback-classic:${logbackVersion}"
    implementation "org.slf4j:jul-to-slf4j:${slf4jVersion}"
    implementation "io.github.microutils:kotlin-logging:${loggingVersion}"

    implementation "io.grpc:grpc-netty-shaded:${grpcVersion}"
    implementation "io.grpc:grpc-protobuf:${grpcVersion}"
    implementation "io.grpc:grpc-stub:${grpcVersion}"
    implementation "io.grpc:grpc-services:${grpcVersion}"
    implementation "com.github.googleapis.gax-kotlin:kgax-grpc:${kgaxVersion}"

    compile 'org.apache.commons:commons-csv:1.7'
    compile 'com.fasterxml.jackson.core:jackson-core:2.10.3'
    compile 'com.fasterxml.jackson.module:jackson-module-kotlin:2.10.3'
    compile "io.ktor:ktor-server-netty:$ktorVersion"
    compile 'org.processing:core:3.3.6'
    compile group: 'org.apache.commons', name: 'commons-collections4', version: '4.4'
    compile 'org.apache.commons:commons-csv:1.7'
    compileOnly "javax.annotation:javax.annotation-api:${annotationVersion}"


    testImplementation "org.amshove.kluent:kluent:$kluentVersion"
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junitVersion"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junitVersion"

}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/main/kotlin'
        }
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                             '-Xuse-experimental=kotlinx.serialization.UnstableDefault',
                             '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes',
                             '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                             '-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi',
                             '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                             '-Xuse-experimental=kotlinx.serialization.ImplicitReflectionSerializer',
                             '-Xuse-experimental=kotlinx.serialization.UnstableDefault',
                             '-Xuse-experimental=io.ktor.util.InternalAPI']
    }
}

compileTestKotlin {
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += ['-Xuse-experimental=kotlin.time.ExperimentalTime',
                             '-Xuse-experimental=kotlinx.serialization.UnstableDefault',
                             '-Xuse-experimental=kotlin.ExperimentalUnsignedTypes',
                             '-Xuse-experimental=kotlinx.coroutines.ExperimentalCoroutinesApi',
                             '-Xuse-experimental=kotlinx.coroutines.InternalCoroutinesApi',
                             '-Xuse-experimental=io.ktor.util.KtorExperimentalAPI',
                             '-Xuse-experimental=kotlinx.serialization.ImplicitReflectionSerializer',
                             '-Xuse-experimental=kotlinx.serialization.UnstableDefault']
    }
}


test {
    useJUnitPlatform()

    testLogging {
        events "passed", "skipped", "failed", "standardOut", "standardError"
        exceptionFormat "full"
        showStandardStreams = true
    }
}

sourceSets {
    main {
        java {
            srcDirs 'src/main/java'
            srcDirs 'src/main/kotlin'
            srcDirs 'build/generated/source/proto/main/grpc'
            srcDirs 'build/generated/source/proto/main/java'
            srcDirs 'build/generated/source/proto/main/client'
        }
    }
}

task server(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'kotlin-server.jar'
    manifest {
        attributes('Main-Class': 'com.aditshah.distributed.infrastructure.server.CommunicationServer')
    }
    from zipTree(shadowJar.archiveFile)
}

task node(type: Jar, dependsOn: shadowJar) {
    archiveFileName = 'kotlin-node.jar'
    manifest {
        attributes('Main-Class': 'com.aditshah.distributed.infrastructure.node.Node')
    }
    from zipTree(shadowJar.archiveFile)
}

shadowJar {
    mergeServiceFiles()
}